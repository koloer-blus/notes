import{_ as p,r as e,o as t,c as o,a as n,b as c,F as l,e as s,d as r}from"./app.1f59b63a.js";const u={},i={id:"\u56DE\u6587\u6570",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#\u56DE\u6587\u6570","aria-hidden":"true"},"#",-1),b=s(),m={href:"https://leetcode.cn/problems/palindrome-number/",target:"_blank",rel:"noopener noreferrer"},d=s("\u56DE\u6587\u6570"),h=r(`<h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h2><p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570 x \uFF0C\u5982\u679C x \u662F\u4E00\u4E2A\u56DE\u6587\u6574\u6570\uFF0C\u8FD4\u56DE true \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE false \u3002</p><p>\u56DE\u6587\u6570\u662F\u6307\u6B63\u5E8F\uFF08\u4ECE\u5DE6\u5411\u53F3\uFF09\u548C\u5012\u5E8F\uFF08\u4ECE\u53F3\u5411\u5DE6\uFF09\u8BFB\u90FD\u662F\u4E00\u6837\u7684\u6574\u6570\u3002</p><p>\u4F8B\u5982\uFF0C121 \u662F\u56DE\u6587\uFF0C\u800C 123 \u4E0D\u662F\u3002</p><ul><li>\u793A\u4F8B 1\uFF1A</li></ul><p>\u8F93\u5165\uFF1Ax = 121 \u8F93\u51FA\uFF1Atrue</p><ul><li>\u793A\u4F8B\xA02\uFF1A</li></ul><p>\u8F93\u5165\uFF1Ax = -121 \u8F93\u51FA\uFF1Afalse \u89E3\u91CA\uFF1A\u4ECE\u5DE6\u5411\u53F3\u8BFB, \u4E3A -121 \u3002 \u4ECE\u53F3\u5411\u5DE6\u8BFB, \u4E3A 121- \u3002\u56E0\u6B64\u5B83\u4E0D\u662F\u4E00\u4E2A\u56DE\u6587\u6570\u3002</p><ul><li>\u793A\u4F8B 3\uFF1A</li></ul><p>\u8F93\u5165\uFF1Ax = 10 \u8F93\u51FA\uFF1Afalse \u89E3\u91CA\uFF1A\u4ECE\u53F3\u5411\u5DE6\u8BFB, \u4E3A 01 \u3002\u56E0\u6B64\u5B83\u4E0D\u662F\u4E00\u4E2A\u56DE\u6587\u6570\u3002</p><ul><li>\u63D0\u793A\uFF1A</li></ul><p>-231\xA0&lt;= x &lt;= 231\xA0- 1</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1Ahttps://leetcode.cn/problems/palindrome-number \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a> \u89E3\u9898\u601D\u8DEF</h2><h3 id="js\u5B57\u7B26\u4E32\u7FFB\u8F6C" tabindex="-1"><a class="header-anchor" href="#js\u5B57\u7B26\u4E32\u7FFB\u8F6C" aria-hidden="true">#</a> JS\u5B57\u7B26\u4E32\u7FFB\u8F6C</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**

 * @param <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>

 * @return <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>

 */</span>

<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="\u53CC\u6307\u9488\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u53CC\u6307\u9488\u6CD5" aria-hidden="true">#</a> \u53CC\u6307\u9488\u6CD5</h3><p>\u8F6C\u5B57\u7B26\u4E32\u540E\u9996\u5C3E\u6307\u9488\u5339\u914D\uFF0C\u901A\u8FC7\u505C\u6B62\u6761\u4EF6\u5224\u65AD\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**

 * @param <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>

 * @return <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>

 */</span>

<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> str <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> e <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> e <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">===</span> str<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">++</span><span class="token punctuation">;</span>
        e <span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> s <span class="token operator">&gt;</span> e

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="\u6570\u5B57\u6C42\u503C\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6570\u5B57\u6C42\u503C\u6CD5" aria-hidden="true">#</a> \u6570\u5B57\u6C42\u503C\u6CD5</h3><p>\u5229\u7528\u53D6\u4F59\u548C\u6574\u9664\u6C42\u5F97\u53CD\u8F6C\u540E\u7684\u503C\uFF0C\u901A\u8FC7\u662F\u5426\u76F8\u7B49\u5224\u65AD\u56DE\u6587\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**

 * @param <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>

 * @return <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>

 */</span>

<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> x<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        reverse <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> reverse<span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> reverse <span class="token operator">===</span> x<span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,22);function f(x,v){const a=e("ExternalLinkIcon");return t(),o(l,null,[n("h1",i,[k,b,n("a",m,[d,c(a)])]),h],64)}var g=p(u,[["render",f],["__file","LEETCODE-\u56DE\u6587\u6570.html.vue"]]);export{g as default};
